// Telegram Bot implementation (Node.js)
const express = require('express');
const axios = require('axios');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// Bot configuration
const BOT_TOKEN = process.env.BOT_TOKEN || 'YOUR_BOT_TOKEN_HERE';
const WEBHOOK_URL = process.env.WEBHOOK_URL || 'YOUR_WEBHOOK_URL_HERE';
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID || 'YOUR_ADMIN_CHAT_ID';

// Middleware
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// Bot API URL
const BOT_API_URL = `https://api.telegram.org/bot${BOT_TOKEN}`;

// Sample products database (in real app, use a proper database)
const products = [
    {
        id: 1,
        title: 'iPhone 15 Pro',
        description: '–ù–æ–≤–µ–π—à–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω —Å —Ç–∏—Ç–∞–Ω–æ–≤—ã–º –∫–æ—Ä–ø—É—Å–æ–º –∏ —á–∏–ø–æ–º A17 Pro',
        price: 89990,
        oldPrice: 99990,
        image: 'https://via.placeholder.com/300x200/667eea/ffffff?text=iPhone+15+Pro',
        category: 'electronics',
        inStock: true
    },
    {
        id: 2,
        title: 'MacBook Air M2',
        description: '–£–ª—å—Ç—Ä–∞—Ç–æ–Ω–∫–∏–π –Ω–æ—É—Ç–±—É–∫ —Å —á–∏–ø–æ–º M2 –∏ –¥–∏—Å–ø–ª–µ–µ–º Liquid Retina',
        price: 119990,
        oldPrice: 139990,
        image: 'https://via.placeholder.com/300x200/764ba2/ffffff?text=MacBook+Air+M2',
        category: 'electronics',
        inStock: true
    },
    {
        id: 3,
        title: 'Nike Air Max 270',
        description: '–£–¥–æ–±–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏–µ–π',
        price: 12990,
        oldPrice: 15990,
        image: 'https://via.placeholder.com/300x200/ff6b6b/ffffff?text=Nike+Air+Max',
        category: 'sports',
        inStock: true
    },
    {
        id: 4,
        title: '–î–∂–∏–Ω—Å—ã Levi\'s 501',
        description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ø—Ä—è–º—ã–µ –¥–∂–∏–Ω—Å—ã –∏–∑ –¥–µ–Ω–∏–º–∞ –ø—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–∞',
        price: 5990,
        oldPrice: 7990,
        image: 'https://via.placeholder.com/300x200/4ecdc4/ffffff?text=Levi\'s+501',
        category: 'clothing',
        inStock: true
    },
    {
        id: 5,
        title: '–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ De\'Longhi',
        description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —ç—Å–ø—Ä–µ—Å—Å–æ –∏ –∫–∞–ø—É—á–∏–Ω–æ',
        price: 45990,
        oldPrice: 52990,
        image: 'https://via.placeholder.com/300x200/45b7d1/ffffff?text=Coffee+Machine',
        category: 'home',
        inStock: true
    }
];

// Orders storage (in real app, use a proper database)
let orders = [];

// Send message to Telegram
async function sendMessage(chatId, text, options = {}) {
    try {
        const response = await axios.post(`${BOT_API_URL}/sendMessage`, {
            chat_id: chatId,
            text: text,
            parse_mode: 'HTML',
            ...options
        });
        return response.data;
    } catch (error) {
        console.error('Error sending message:', error);
        throw error;
    }
}

// Send message with inline keyboard
async function sendMessageWithKeyboard(chatId, text, keyboard) {
    return await sendMessage(chatId, text, {
        reply_markup: {
            inline_keyboard: keyboard
        }
    });
}

// Handle incoming webhook
app.post('/webhook', async (req, res) => {
    try {
        const update = req.body;
        
        if (update.message) {
            await handleMessage(update.message);
        } else if (update.callback_query) {
            await handleCallbackQuery(update.callback_query);
        }
        
        res.status(200).send('OK');
    } catch (error) {
        console.error('Webhook error:', error);
        res.status(500).send('Error');
    }
});

// Handle text messages
async function handleMessage(message) {
    const chatId = message.chat.id;
    const text = message.text;

    if (text === '/start') {
        await sendWelcomeMessage(chatId);
    } else if (text === '/shop') {
        await sendShopMessage(chatId);
    } else if (text === '/orders') {
        await sendOrdersMessage(chatId);
    } else if (text === '/help') {
        await sendHelpMessage(chatId);
    } else {
        await sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±–æ—Ç—É.');
    }
}

// Handle callback queries
async function handleCallbackQuery(callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    if (data === 'open_shop') {
        await sendShopMessage(chatId);
    } else if (data.startsWith('product_')) {
        const productId = parseInt(data.split('_')[1]);
        await sendProductDetails(chatId, productId);
    } else if (data.startsWith('category_')) {
        const category = data.split('_')[1];
        await sendProductsByCategory(chatId, category);
    } else if (data === 'view_orders') {
        await sendOrdersMessage(chatId);
    }
}

// Send welcome message
async function sendWelcomeMessage(chatId) {
    const message = `
üõçÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
‚Ä¢ –û—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
    `;

    const keyboard = [
        [{ text: 'üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', callback_data: 'open_shop' }],
        [{ text: 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'view_orders' }],
        [{ text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' }]
    ];

    await sendMessageWithKeyboard(chatId, message, keyboard);
}

// Send shop message
async function sendShopMessage(chatId) {
    const message = `
üõçÔ∏è <b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤:
    `;

    const keyboard = [
        [{ text: 'üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', callback_data: 'category_electronics' }],
        [{ text: 'üëï –û–¥–µ–∂–¥–∞', callback_data: 'category_clothing' }],
        [{ text: 'üè† –î–æ–º', callback_data: 'category_home' }],
        [{ text: '‚öΩ –°–ø–æ—Ä—Ç', callback_data: 'category_sports' }],
        [{ text: 'üîÑ –í—Å–µ —Ç–æ–≤–∞—Ä—ã', callback_data: 'category_all' }]
    ];

    await sendMessageWithKeyboard(chatId, message, keyboard);
}

// Send products by category
async function sendProductsByCategory(chatId, category) {
    let filteredProducts = products;
    
    if (category !== 'all') {
        filteredProducts = products.filter(p => p.category === category);
    }

    if (filteredProducts.length === 0) {
        await sendMessage(chatId, '–¢–æ–≤–∞—Ä—ã –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
        return;
    }

    const message = `üì¶ <b>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${getCategoryName(category)}"</b>\n\n`;
    
    const keyboard = filteredProducts.slice(0, 5).map(product => [
        { 
            text: `${product.title} - ${formatPrice(product.price)}`, 
            callback_data: `product_${product.id}` 
        }
    ]);

    if (filteredProducts.length > 5) {
        keyboard.push([{ text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥', url: `${WEBHOOK_URL}/shop` }]);
    }

    await sendMessageWithKeyboard(chatId, message, keyboard);
}

// Send product details
async function sendProductDetails(chatId, productId) {
    const product = products.find(p => p.id === productId);
    if (!product) {
        await sendMessage(chatId, '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
    }

    const message = `
üì¶ <b>${product.title}</b>

${product.description}

üí∞ <b>–¶–µ–Ω–∞:</b> ${formatPrice(product.price)}
${product.oldPrice ? `üí∏ <b>–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞:</b> ${formatPrice(product.oldPrice)}` : ''}
üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${getCategoryName(product.category)}
${product.inStock ? '‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' : '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}

–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω:
    `;

    const keyboard = [
        [{ text: 'üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', url: `${WEBHOOK_URL}/shop` }],
        [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É', callback_data: 'open_shop' }]
    ];

    await sendMessageWithKeyboard(chatId, message, keyboard);
}

// Send orders message
async function sendOrdersMessage(chatId) {
    const userOrders = orders.filter(order => order.customerPhone === 'user_phone'); // In real app, use user ID
    
    if (userOrders.length === 0) {
        await sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.');
        return;
    }

    let message = 'üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n';
    
    userOrders.forEach((order, index) => {
        message += `${index + 1}. –ó–∞–∫–∞–∑ #${order.id}\n`;
        message += `   –°—Ç–∞—Ç—É—Å: ${getOrderStatusText(order.status)}\n`;
        message += `   –°—É–º–º–∞: ${formatPrice(order.total)}\n`;
        message += `   –î–∞—Ç–∞: ${new Date(order.timestamp).toLocaleDateString('ru-RU')}\n\n`;
    });

    const keyboard = [
        [{ text: 'üõí –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑', callback_data: 'open_shop' }]
    ];

    await sendMessageWithKeyboard(chatId, message, keyboard);
}

// Send help message
async function sendHelpMessage(chatId) {
    const message = `
‚ùì <b>–ü–æ–º–æ—â—å</b>

<b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/shop - –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω
/orders - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:</b>
1. –û—Ç–∫—Ä–æ–π—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∫–æ–º–∞–Ω–¥–æ–π /shop
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É
3. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
4. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    `;

    const keyboard = [
        [{ text: 'üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', callback_data: 'open_shop' }]
    ];

    await sendMessageWithKeyboard(chatId, message, keyboard);
}

// API endpoint for orders
app.post('/api/orders', async (req, res) => {
    try {
        const orderData = req.body;
        
        // Validate order data
        if (!orderData.customerName || !orderData.customerPhone || !orderData.items) {
            return res.status(400).json({ error: 'Invalid order data' });
        }

        // Add order
        const order = {
            id: Date.now().toString(),
            ...orderData,
            status: 'pending',
            timestamp: new Date().toISOString()
        };
        
        orders.push(order);

        // Send notification to admin
        await sendOrderNotification(order);

        // Send confirmation to customer
        await sendOrderConfirmation(order.customerPhone, order);

        res.json({ success: true, orderId: order.id });
    } catch (error) {
        console.error('Order error:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Send order notification to admin
async function sendOrderNotification(order) {
    const message = `
üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${order.customerName}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${order.customerPhone}
üìç <b>–ê–¥—Ä–µ—Å:</b> ${order.customerAddress}
üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> ${order.paymentMethod === 'card' ? '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞' : '–ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏'}

üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>
${order.items.map(item => 
    `‚Ä¢ ${item.title} x${item.quantity} - ${formatPrice(item.price * item.quantity)}`
).join('\n')}

üí∞ <b>–ò—Ç–æ–≥–æ:</b> ${formatPrice(order.total)}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date(order.timestamp).toLocaleString('ru-RU')}
    `;

    await sendMessage(ADMIN_CHAT_ID, message);
}

// Send order confirmation to customer
async function sendOrderConfirmation(phone, order) {
    // In real app, you would need to map phone to chat ID
    // For demo purposes, we'll just log it
    console.log('Order confirmation for phone:', phone);
}

// Utility functions
function formatPrice(price) {
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB',
        minimumFractionDigits: 0
    }).format(price);
}

function getCategoryName(category) {
    const categories = {
        'electronics': '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        'clothing': '–û–¥–µ–∂–¥–∞',
        'home': '–î–æ–º',
        'sports': '–°–ø–æ—Ä—Ç',
        'all': '–í—Å–µ —Ç–æ–≤–∞—Ä—ã'
    };
    return categories[category] || category;
}

function getOrderStatusText(status) {
    const statuses = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    };
    return statuses[status] || status;
}

// Set webhook
async function setWebhook() {
    try {
        const response = await axios.post(`${BOT_API_URL}/setWebhook`, {
            url: WEBHOOK_URL + '/webhook'
        });
        console.log('Webhook set:', response.data);
    } catch (error) {
        console.error('Error setting webhook:', error);
    }
}

// Start server
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
    setWebhook();
});

module.exports = app;
