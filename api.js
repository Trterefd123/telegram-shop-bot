// API functions for Telegram Mini App
class TelegramShopAPI {
    constructor() {
        this.baseURL = 'https://api.telegram.org/bot';
        this.botToken = CONFIG.BOT_TOKEN;
    }

    // Send message to user
    async sendMessage(chatId, text, options = {}) {
        const url = `${this.baseURL}${this.botToken}/sendMessage`;
        const data = {
            chat_id: chatId,
            text: text,
            parse_mode: 'HTML',
            ...options
        };

        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });
            return await response.json();
        } catch (error) {
            console.error('Error sending message:', error);
            throw error;
        }
    }

    // Send order notification to admin
    async sendOrderNotification(orderData) {
        const adminChatId = 'YOUR_ADMIN_CHAT_ID'; // Replace with admin chat ID
        
        const message = `
üõí <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${orderData.customerName}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${orderData.customerPhone}
üìç <b>–ê–¥—Ä–µ—Å:</b> ${orderData.customerAddress}
üí≥ <b>–û–ø–ª–∞—Ç–∞:</b> ${orderData.paymentMethod === 'card' ? '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞' : '–ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏'}

üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>
${orderData.items.map(item => 
    `‚Ä¢ ${item.title} x${item.quantity} - ${formatPrice(item.price * item.quantity)}`
).join('\n')}

üí∞ <b>–ò—Ç–æ–≥–æ:</b> ${formatPrice(orderData.total)}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date(orderData.timestamp).toLocaleString('ru-RU')}
        `;

        return await this.sendMessage(adminChatId, message);
    }

    // Send order confirmation to customer
    async sendOrderConfirmation(chatId, orderData) {
        const message = `
‚úÖ <b>–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:

üë§ <b>–ò–º—è:</b> ${orderData.customerName}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${orderData.customerPhone}
üìç <b>–ê–¥—Ä–µ—Å:</b> ${orderData.customerAddress}

üì¶ <b>–í–∞—à –∑–∞–∫–∞–∑:</b>
${orderData.items.map(item => 
    `‚Ä¢ ${item.title} x${item.quantity} - ${formatPrice(item.price * item.quantity)}`
).join('\n')}

üí∞ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> ${formatPrice(orderData.total)}

–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.
        `;

        return await this.sendMessage(chatId, message);
    }

    // Get user data from Telegram
    getUserData() {
        const tg = window.Telegram.WebApp;
        return {
            id: tg.initDataUnsafe.user?.id,
            username: tg.initDataUnsafe.user?.username,
            first_name: tg.initDataUnsafe.user?.first_name,
            last_name: tg.initDataUnsafe.user?.last_name,
            language_code: tg.initDataUnsafe.user?.language_code
        };
    }

    // Validate order data
    validateOrder(orderData) {
        const errors = [];

        if (!orderData.customerName || orderData.customerName.trim().length < 2) {
            errors.push('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
        }

        if (!orderData.customerPhone || !/^[\+]?[0-9\s\-\(\)]{10,}$/.test(orderData.customerPhone)) {
            errors.push('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        }

        if (!orderData.customerAddress || orderData.customerAddress.trim().length < 10) {
            errors.push('–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤');
        }

        if (!orderData.paymentMethod) {
            errors.push('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã');
        }

        if (!orderData.items || orderData.items.length === 0) {
            errors.push('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
        }

        return {
            isValid: errors.length === 0,
            errors: errors
        };
    }

    // Save order to local storage (for demo purposes)
    saveOrder(orderData) {
        const orders = JSON.parse(localStorage.getItem('orders') || '[]');
        orders.push({
            ...orderData,
            id: Date.now().toString(),
            status: 'pending'
        });
        localStorage.setItem('orders', JSON.stringify(orders));
        return orders[orders.length - 1];
    }

    // Get orders from local storage
    getOrders() {
        return JSON.parse(localStorage.getItem('orders') || '[]');
    }

    // Update order status
    updateOrderStatus(orderId, status) {
        const orders = this.getOrders();
        const order = orders.find(o => o.id === orderId);
        if (order) {
            order.status = status;
            order.updatedAt = new Date().toISOString();
            localStorage.setItem('orders', JSON.stringify(orders));
        }
        return order;
    }
}

// Create API instance
const api = new TelegramShopAPI();

// Utility function for price formatting
function formatPrice(price) {
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB',
        minimumFractionDigits: 0
    }).format(price);
}

// Export for use in other files
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { TelegramShopAPI, api };
}
